# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax
  #   - http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://myronmars.to/n/dev-blog/2014/05/notable-changes-in-rspec-3#new__config_option_to_disable_rspeccore_monkey_patching
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end


ikea = {:chair => 25, :table => 85, :mattress => 450}

# This didn't pass because it calls the "value" method
def key_for_min_value_my_try(name_hash)
  name_hash.key(name_hash.values.min)
end

key_for_min_value_my_try(ikea)

# This is learn.co's passing solution

def key_for_min_value(hash)
  smallest_key = nil
  tiniest_value = nil
  hash.each do |key, value|
    if tiniest_value == nil || value < tiniest_value
      tiniest_value = value
      smallest_key = key
    end
  end
  smallest_key
end

key_for_min_value(ikea)


  epic_tragedy = {
   :montague => {
      :patriarch => {name: "Lord Montague", age: "53"},
      :matriarch => {name: "Lady Montague", age: "54"},
      :hero => {name: "Romeo", age: "15", status: "alive"},
      :hero_friends => [
         {name: "Benvolio", age: "17", attitude: "worried"},
         {name: "Steven", age: "30", attitude: "confused"}
      ]
   }, 
   :capulet => {
      :patriarch => {name: "Lord Capulet", age: "50"},
      :matriarch => {name: "Lady Capulet", age: "51"},
      :heroine => {name: "Juliet", age: "15", status: "alive"},
      :heroine_friends => [
          {name: "Mercutio", age: "18", attitude: "hot-headed"}, 
          {name: "Nurse", age: "44", attitude: "worried"}
      ]
   }
  }
  
epic_tragedy[:montague][:hero][:status] = "dead"
epic_tragedy
  
  
def monopoly
  monopoly = {}
  monopoly[:railroads] = {}
end 
  
monopoly


# The following method won't work... the correct way is below:

# def monopoly_with_third_tier
#  monopoly[:pieces] = 4,
#  monopoly[:rent_in_dollars] = "one_piece_owned", "two_pieces_owned", "three_pieces_owned", "four_pieces_owned"
#  monopoly[:names] = "reading_railroad", "pennsylvania_railroad", "b_and_o_railroad", "shortline"
# end 


# This one did not pass the learn.co test because of the following error message:

# expected: [:pieces, :names, :rent_in_dollars]
# got:      [:pieces, :rent_in_dollars, :names]


# def monopoly_with_second_tier
	#copy and paste the monopoly hash you built in the previous method. We're going to add stuff to it here!
#   monopoly = {
#     railroads: {
#       pieces: 4,
#       rent_in_dollars: {}, 
#       names: {}
#     }
#   }
# end

# This one passed correctly:

def monopoly_with_second_tier
#copy and paste the monopoly hash you built in the previous method. We're going to add stuff to it here!
  monopoly = {
    railroads: {
     pieces: 4,
     names: {},
     rent_in_dollars: {}
   }
  }
end

monopoly_with_second_tier


# This method is also incorrect because it adds a hash key as a string
# "mortgage_value" is a hash key, so it can't be entered like this.
# The correct way is shown in the next example below:

#def monopoly_with_third_tier
#  monopoly = {
#    railroads: {
#      pieces: 4,                               <===apparently you can enter an integer like this...
#      rent_in_dollars: { 
#        :one_piece_owned => 25,                  <=== ...or like this
#        :two_pieces_owned => 50,                 <=== ,this
#        :three_pieces_owned => 100,              <=== ,this
#        :four_pieces_owned => 200                <=== ,and this   
#      }, 
#      names: {
#        reading_railroad: "mortgage_value",      <===here's the problem
#        pennsylvania_railroad: "mortgage_value", <===same here
#        b_and_o_railroad: "shortline"            <===and here
#      }
#    }
#  }
#end 

def monopoly_with_third_tier
  monopoly = {
    railroads: {
      pieces: 4,
      rent_in_dollars: {
        one_piece_owned:      25, 
# alt  :one_piece_owned =>    25,  <===this will give you the same result         
        two_pieces_owned:     50,
# alt  :two_pieces_owned =>   25,  <===this will give you the same result 
        three_pieces_owned:   100, 
# alt  :three_pieces_owned => 100, <===this will give you the same result 
        four_pieces_owned:    200
# alt  :four_pieces_owned =>  200  <===this will give you the same result 
      }, 
      names: {
        reading_railroad: {},
        pennsylvania_railroad: {},
        b_and_o_railroad: {},
        shortline: {}
      }
    }
  }
end 

monopoly_with_third_tier


def monopoly_with_fourth_tier
  monopoly = {
    railroads: {
      pieces: 4,
      rent_in_dollars: {
        one_piece_owned:      25, 
# alt  :one_piece_owned =>    25,  <===this will give you the same result         
        two_pieces_owned:     50,
# alt  :two_pieces_owned =>   25,  <===this will give you the same result 
        three_pieces_owned:   100, 
# alt  :three_pieces_owned => 100, <===this will give you the same result 
        four_pieces_owned:    200
# alt  :four_pieces_owned =>  200  <===this will give you the same result 
      }, 
      names: {
        reading_railroad: { 
          "mortgage_value" => "$100",
        },
        pennsylvania_railroad: {
          "mortgage_value" => "$200"
        },
        b_and_o_railroad: {
          "mortgage_value" => "$400"
        },
        shortline: {
          "mortgage_value" => "$800"
        }
      }
    }
  }
end

monopoly_with_fourth_tier

